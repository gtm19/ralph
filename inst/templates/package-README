{{#Rmd}}
---
output: github_document
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
```
{{/Rmd}}

# {{{ Package }}}

<!-- badges: start -->
<!-- badges: end -->

The goal of {{{ Package }}} is to ...

## Installation

You can install the released version of {{{ Package }}} from [CRAN](https://CRAN.R-project.org) with:

``` r
install.packages("{{{ Package }}}")
```

{{#Dev}}
## Development Tools

{{#Renv}}
### `renv`

This project makes use of the `renv` package to manage its dependencies.

As a developer, when working on this project, after pulling the repo from GitHub, you should run the following in the R console in order to (re)install the dependencies:

```r
renv::restore()
```

If your additions introduce dependencies, you should add them to the lockfile as follows:

```r
renv::snapshot()
```

At any point, if you want to see whether your project library or lockfile are out of date, you can (and should) run:

```r
renv::status()
```
{{/Renv}}

{{/Dev}}

## Example

This is a basic example which shows you how to solve a common problem:

{{#Rmd}}
```{r example}
{{/Rmd}}
{{^Rmd}}``` r
{{/Rmd}}
library({{Package}})
## basic example code
```

{{#Rmd}}
What is special about using `README.Rmd` instead of just `README.md`? You can include R chunks like so:

```{r cars}
summary(cars)
```

You'll still need to render `README.Rmd` regularly, to keep `README.md` up-to-date. `devtools::build_readme()` is handy for this. You could also use GitHub Actions to re-render `README.Rmd` every time you push. An example workflow can be found here: <https://github.com/r-lib/actions/tree/master/examples>.

You can also embed plots, for example:

```{r pressure, echo = FALSE}
plot(pressure)
```

In that case, don't forget to commit and push the resulting figure files, so they display on GitHub and CRAN.
{{/Rmd}}
